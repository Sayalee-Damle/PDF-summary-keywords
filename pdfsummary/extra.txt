"""
with st.chat_message("assistant"):
    pdf_translate = st.write(placeholder= "Do you want to translate the summary?")
with st.chat_message("user"):
    ans = st.write(placeholder= "Yes or No?")
if pdf_translate:
    st.write(pdf_translate)
    if str(pdf_translate).lower() == 'yes':
        lang = st.chat_input(placeholder= "Which language?")

    if lang:
        with st.spinner("Generating response"):
            st.write(lang)
            translation = ek.translation(summary, lang)
            with st.chat_message("assistant"):
                st.write(translation)
            #display translation

questions = st.chat_input(placeholder= "Do you have any questions related to this?")
if str(questions) == 'yes':
    query =st.chat_input(placeholder= "Question")
    db = ek.check_embd_dir(read_pdf)"""



if y.lower() == "Yes":
        with st.chat_message("assistant"):
            st.write("Which language?")
        lang = st.chat_input("Which language?")
        st.markdown(lang)
        translation = ek.translation(summary, lang)
        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            st.markdown(translation)


if prompt:= st.chat_input("Type here"):
    with st.chat_message("user"):
        st.write(prompt)
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.spinner("Generating response"):
        db, pages = ve.init_vector_store(Path(prompt))
        summary = 'summary' #ek.summary_llm(pages)
        with st.chat_message("assistant"):
            st.write(summary)
        st.session_state.messages.append({"role": "assistant", "content": summary})
        #display summary
    translate = "Do you want to translate the summary (Yes/No)?"
    with st.chat_message("assistant"):
        st.markdown(translate)
    
    with st.chat_message("user"):
        st.write()
        st.session_state.messages.append({"role": "user", "content": prompt})

    if prompt.lower() == "yes":
        lang = "Which language?"
        with st.chat_message("assistant"):
            st.markdown(lang)
        #prompt = None
        with st.chat_message("user"):
            st.write(prompt)
        
    # Add user message to chat history
    #st.session_state.messages.append({"role": "user", "content": prompt})
    
        # Add assistant response to chat history
        #st.session_state.messages.append({"role": "assistant", "content": response})



  ask_message = cl.AskFileMessage(
        content="Please upload a PDF",
        accept=["application/pdf"]
    )

    ask_message.send()
       
     while path_pdf == None:
        path_pdf = await cl.AskUserMessage(
            content=f"enter path of PDF"
        ).send()